{
  "api/ASEassignment.AppArray.html": {
    "href": "api/ASEassignment.AppArray.html",
    "title": "Class AppArray | ASE Assignment final",
    "keywords": "Class AppArray Namespace ASEassignment Assembly ASEassignment.dll Represents an implementation of an array class with restrictions on usage and additional parameter checks. Extends the BOOSE.Array class. public class AppArray : Array, ICommand Inheritance object Command Evaluation Array AppArray Implements ICommand Derived AppPeek AppPoke Inherited Members Array.PEEK Array.POKE Array.type Array.rows Array.columns Array.valueInt Array.valueReal Array.intArray Array.realArray Array.pokeValue Array.peekVar Array.rowS Array.columnS Array.row Array.column Array.ArrayRestrictions() Array.ReduceRestrictionCounter() Array.Compile() Array.CheckParameters(string[]) Array.Execute() Array.ProcessArrayParametersCompile(bool) Array.ProcessArrayParametersExecute(bool) Array.SetIntArray(int, int, int) Array.SetRealArray(double, int, int) Array.GetIntArray(int, int) Array.GetRealArray(int, int) Array.Rows Array.Columns Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppArray() Initializes a new instance of the AppArray class and reduces the restriction counter. public AppArray()"
  },
  "api/ASEassignment.AppBoolean.html": {
    "href": "api/ASEassignment.AppBoolean.html",
    "title": "Class AppBoolean | ASE Assignment final",
    "keywords": "Class AppBoolean Namespace ASEassignment Assembly ASEassignment.dll Represents an implementation of the BOOSE.Boolean class with overridden behavior. public class AppBoolean : Boolean, ICommand Inheritance object Command Evaluation Boolean AppBoolean Implements ICommand Inherited Members Boolean.Compile() Boolean.Execute() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppBoolean() Initializes a new instance of the AppBoolean class and removes restrictions. public AppBoolean() Methods Restrictions() Overrides the Restrictions() method to remove any restrictions in the base class. public override void Restrictions()"
  },
  "api/ASEassignment.AppCanvas.html": {
    "href": "api/ASEassignment.AppCanvas.html",
    "title": "Class AppCanvas | ASE Assignment final",
    "keywords": "Class AppCanvas Namespace ASEassignment Assembly ASEassignment.dll Represents the application canvas for drawing shapes, text, and graphics. Implements the BOOSE.ICanvas interface. Implements the Singleton design pattern to ensure only one instance exists. public class AppCanvas : ICanvas Inheritance object AppCanvas Implements ICanvas Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Instance Gets the singleton instance of the AppCanvas class. public static AppCanvas Instance { get; } Property Value AppCanvas The singleton instance of the AppCanvas. Remarks This property ensures that only one instance of the AppCanvas class is created. PenColour Gets or sets the color of the pen used for drawing. public object PenColour { get; set; } Property Value object Xpos Gets or sets the X-coordinate of the pen's current position. public int Xpos { get; set; } Property Value int Ypos Gets or sets the Y-coordinate of the pen's current position. public int Ypos { get; set; } Property Value int Methods Circle(int, bool) Draws a circle at the current position with the specified radius. public void Circle(int radius, bool filled) Parameters radius int The radius of the circle. filled bool True to fill the circle; otherwise, false. Exceptions CanvasException Thrown if an error occurs while drawing the circle. Clear() Clears the canvas, filling it with the default background color. public void Clear() Exceptions CanvasException Thrown if an error occurs while clearing the canvas. DrawTo(int, int) Draws a line from the current position to the specified position. public void DrawTo(int x, int y) Parameters x int The X-coordinate of the target position. y int The Y-coordinate of the target position. Exceptions CanvasException Thrown if an invalid position is provided. MoveTo(int, int) Moves the pen to the specified position without drawing. public void MoveTo(int x, int y) Parameters x int The X-coordinate of the new position. y int The Y-coordinate of the new position. Exceptions CanvasException Thrown if an invalid position is provided. Rect(int, int, bool) Draws a rectangle with the specified dimensions. public void Rect(int width, int height, bool filled) Parameters width int The width of the rectangle. height int The height of the rectangle. filled bool True to fill the rectangle; otherwise, false. Exceptions CanvasException Thrown if an error occurs while drawing the rectangle. Redo() public void Redo() Reset() Resets the canvas to its default state and the Xposition and Yposition to 0. public void Reset() Exceptions CanvasException Thrown if an error occurs while resetting the canvas. Set(int, int) Sets the dimensions of the canvas and resets the current position. public void Set(int width, int height) Parameters width int The width of the canvas. height int The height of the canvas. Exceptions CanvasException Thrown if an error occurs while setting the canvas size. SetBitmap(Bitmap) Sets the bitmap of an image that is loaded. public void SetBitmap(Bitmap bitmap) Parameters bitmap Bitmap The bitmap to be drawn. Exceptions CanvasException Thrown if an error occurs while setting bitmap. SetColour(int, int, int) Sets the color of the pen using RGB values. public void SetColour(int red, int green, int blue) Parameters red int The red component (0-255). green int The green component (0-255). blue int The blue component (0-255). Exceptions ArgumentException Thrown if the RGB values are out of range (0-255). Tri(int, int) Draws an equilateral triangle at the current position. public void Tri(int width, int height) Parameters width int The width of the triangle's base. height int The height of the triangle. Exceptions CanvasException Thrown if an error occurs while drawing the triangle. Undo() public void Undo() WriteText(string) Draws the specified text at the current position. public void WriteText(string text) Parameters text string The text to display. Exceptions CanvasException Thrown if an error occurs while displaying the text. getBitmap() Returns the current bitmap of the canvas. public object getBitmap() Returns object The Bitmap object representing the canvas. Exceptions CanvasException Thrown if an error occurs while getting the bitmap."
  },
  "api/ASEassignment.AppCircle.html": {
    "href": "api/ASEassignment.AppCircle.html",
    "title": "Class AppCircle | ASE Assignment final",
    "keywords": "Class AppCircle Namespace ASEassignment Assembly ASEassignment.dll Represents a drawing command for circle with optional filled property. Extends the BOOSE.Circle class to include additional functionality. public class AppCircle : Circle, ICommand Inheritance object Command CanvasCommand CommandOneParameter Circle AppCircle Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppCircle() Initializes a default instance of the AppCircle class. public AppCircle() AppCircle(Canvas, int, bool) Initializes a new instance of the AppCircle class with specified parameters. public AppCircle(Canvas c, int radius, bool filled = false) Parameters c Canvas The canvas on which the circle will be drawn. radius int The radius of the circle. filled bool Indicates whether the circle is filled or not. Methods CheckParameters(string[]) Validates the parameters passed to the circle drawing command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters provided to the command. Exceptions CommandException Thrown if number of parameters is invalid or filled parameter is not valid . Execute() Executes the circle drawing command on the canvas. public override void Execute() Exceptions CommandException Thrown if there is any error while executing the command."
  },
  "api/ASEassignment.AppClear.html": {
    "href": "api/ASEassignment.AppClear.html",
    "title": "Class AppClear | ASE Assignment final",
    "keywords": "Class AppClear Namespace ASEassignment Assembly ASEassignment.dll Represents the command to clear the canvas, removing all drawings. Inherits from BOOSE.CanvasCommand. public class AppClear : CanvasCommand, ICommand Inheritance object Command CanvasCommand AppClear Implements ICommand Inherited Members CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppClear() Initializes a new instance of the AppClear class. public AppClear() AppClear(Canvas) Initializes a new instance of the AppClear class with the specified canvas. public AppClear(Canvas c) Parameters c Canvas The canvas to clear. Methods CheckParameters(string[]) Checks the parameters for the clear command. The clear command does not require any parameters, so throws an exception if parameters are provided. public override void CheckParameters(string[] parameter) Parameters parameter string[] The array of parameters passed to the command. Exceptions CommandException Thrown if any parameters are provided, as the clear command takes no parameters. Execute() Executes the clear command, clearing all drawings from the canvas. Calls the BOOSE.Canvas.Clear() method to fill the canvas with the default background color. public override void Execute()"
  },
  "api/ASEassignment.AppCommandFactory.html": {
    "href": "api/ASEassignment.AppCommandFactory.html",
    "title": "Class AppCommandFactory | ASE Assignment final",
    "keywords": "Class AppCommandFactory Namespace ASEassignment Assembly ASEassignment.dll A factory class responsible for creating commands based on the command type. Inherits from BOOSE.CommandFactory. public class AppCommandFactory : CommandFactory, ICommandFactory Inheritance object CommandFactory AppCommandFactory Implements ICommandFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AppCommandFactory() Initializes a new instance of the AppCommandFactory class. public AppCommandFactory() Methods MakeCommand(string) Creates a command based on the provided command type. The command type is processed by trimming and converting it to lowercase. public override ICommand MakeCommand(string commandType) Parameters commandType string A string representing the type of command to create. Returns ICommand An BOOSE.ICommand instance corresponding to the specified command type. Exceptions ArgumentNullException Thrown if commandType is null or empty."
  },
  "api/ASEassignment.AppCompoundCommand.html": {
    "href": "api/ASEassignment.AppCompoundCommand.html",
    "title": "Class AppCompoundCommand | ASE Assignment final",
    "keywords": "Class AppCompoundCommand Namespace ASEassignment Assembly ASEassignment.dll Represents a compound command, extending the functionality of the BOOSE.ConditionalCommand class. Used to define and manage compound structures like loops or conditional blocks. public class AppCompoundCommand : AppConditionalCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand AppConditionalCommand AppCompoundCommand Implements ICommand Derived AppElse AppEnd AppIf AppWhile Inherited Members ConditionalCommand.endLineNumber ConditionalCommand.Compile() ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppCompoundCommand() Initializes a new instance of the AppCompoundCommand class. public AppCompoundCommand() Properties CorrCommand Gets or sets the corresponding command for this compound command. public ConditionalCommand CorrCommand { get; set; } Property Value ConditionalCommand Methods CheckParameters(string[]) Validates the parameters passed to the compound command. public override void CheckParameters(string[] parameters) Parameters parameters string[] An array of parameters passed to the command. Exceptions CommandException Thrown if the number of parameters is incorrect or the content is invalid. Execute() Executes the method by calling the base class's Execute method and resetting the count to 0. public override void Execute() ResetCount(int) Resets the count in the BOOSE.Boolean class by accessing its private static field. public void ResetCount(int newVal) Parameters newVal int The new value to set for the count."
  },
  "api/ASEassignment.AppConditionalCommand.html": {
    "href": "api/ASEassignment.AppConditionalCommand.html",
    "title": "Class AppConditionalCommand | ASE Assignment final",
    "keywords": "Class AppConditionalCommand Namespace ASEassignment Assembly ASEassignment.dll Extending the functionality of the BOOSE.ConditionalCommand class. public class AppConditionalCommand : ConditionalCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand AppConditionalCommand Implements ICommand Derived AppCompoundCommand Inherited Members ConditionalCommand.endLineNumber ConditionalCommand.Compile() ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Execute() Executes the conditional command and resets the counter after execution. public override void Execute() Exceptions BOOSEException Thrown if there is any error in the counter reset. ResetCount(int) Resets the internal static counter in the BOOSE.Boolean class. public void ResetCount(int newVal) Parameters newVal int The new value to set for the static counter. Exceptions BOOSEException Thrown if the internal field cannot be accessed."
  },
  "api/ASEassignment.AppElse.html": {
    "href": "api/ASEassignment.AppElse.html",
    "title": "Class AppElse | ASE Assignment final",
    "keywords": "Class AppElse Namespace ASEassignment Assembly ASEassignment.dll Represents the implementation of an \"Else\" conditional command in the program. public class AppElse : AppCompoundCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand AppConditionalCommand AppCompoundCommand AppElse Implements ICommand Inherited Members AppCompoundCommand.CorrCommand AppCompoundCommand.ResetCount(int) ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppElse() Initializes a new instance of the AppElse class. public AppElse() Properties CorrEnd Gets or sets the corresponding BOOSE.End command for this \"Else\" statement. public End CorrEnd { get; set; } Property Value End Methods CheckParameters(string[]) Validates the parameters provided for the \"Else\" command. public override void CheckParameters(string[] parameter) Parameters parameter string[] The parameters for the command. Exceptions CommandException Thrown if the parameters are invalid. Compile() Compiles the \"Else\" command by linking it to the corresponding \"If\" or other compound command and updates the program structure. public override void Compile() Exceptions Exception Thrown if an error occurs during compilation. Execute() Executes the \"Else\" command and updates the program counter if the condition is true. public override void Execute()"
  },
  "api/ASEassignment.AppEnd.html": {
    "href": "api/ASEassignment.AppEnd.html",
    "title": "Class AppEnd | ASE Assignment final",
    "keywords": "Class AppEnd Namespace ASEassignment Assembly ASEassignment.dll Represents the implementation of the \"End\" command which marks the end of compound commands such as If, While, and For. public class AppEnd : AppCompoundCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand AppConditionalCommand AppCompoundCommand AppEnd Implements ICommand Inherited Members AppCompoundCommand.CorrCommand AppCompoundCommand.CheckParameters(string[]) AppCompoundCommand.ResetCount(int) ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppEnd() Initializes a new instance of the AppEnd class. public AppEnd() Methods Compile() Compiles the \"End\" command and links it to the corresponding compound command (If, While, For). public override void Compile() Exceptions CommandException Thrown if the syntax does not match the format for the corresponding compound command. Exception Thrown if any error occurs during compilation. Execute() Executes the \"End\" command and handles the logic for compound commands. public override void Execute() Exceptions CommandException Thrown if loop control variable does not exist or is invalid. Exception Thrown if any error occurs during execution."
  },
  "api/ASEassignment.AppFor.html": {
    "href": "api/ASEassignment.AppFor.html",
    "title": "Class AppFor | ASE Assignment final",
    "keywords": "Class AppFor Namespace ASEassignment Assembly ASEassignment.dll Represents the implementation of the \"For\" command, extending the functionality of the base BOOSE.For class. public class AppFor : For, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand For AppFor Implements ICommand Inherited Members For.Compile() For.LoopControlV For.From For.To For.Step ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppFor() Initializes a new instance of the AppFor class. public AppFor() Methods Execute() Executes the method by calling the base class's Execute method and resetting the count to 0. public override void Execute() ResetCount(int) Resets the count in the BOOSE.Boolean class by accessing its private static field. public void ResetCount(int newVal) Parameters newVal int The new value to set for the count."
  },
  "api/ASEassignment.AppIf.html": {
    "href": "api/ASEassignment.AppIf.html",
    "title": "Class AppIf | ASE Assignment final",
    "keywords": "Class AppIf Namespace ASEassignment Assembly ASEassignment.dll Represents implementation of compound command to handle \"If\" statements. public class AppIf : AppCompoundCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand AppConditionalCommand AppCompoundCommand AppIf Implements ICommand Inherited Members AppCompoundCommand.CorrCommand AppCompoundCommand.CheckParameters(string[]) AppCompoundCommand.ResetCount(int) AppCompoundCommand.Execute() ConditionalCommand.endLineNumber ConditionalCommand.Compile() ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppIf() Initializes a new instance of the AppIf class. public AppIf()"
  },
  "api/ASEassignment.AppInt.html": {
    "href": "api/ASEassignment.AppInt.html",
    "title": "Class AppInt | ASE Assignment final",
    "keywords": "Class AppInt Namespace ASEassignment Assembly ASEassignment.dll Represents the AppInt class, which extends the functionality of the BOOSE.Int class. Enforces restrictions on the usage of integer variables and provides methods for compilation and execution. public class AppInt : Int, ICommand Inheritance object Command Evaluation Int AppInt Implements ICommand Inherited Members Int.Compile() Int.Execute() Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppInt() Initializes a new instance of the AppInt class. public AppInt() Methods Restrictions() Restrictions are removed in this case. public override void Restrictions()"
  },
  "api/ASEassignment.AppMethodd.html": {
    "href": "api/ASEassignment.AppMethodd.html",
    "title": "Class AppMethodd | ASE Assignment final",
    "keywords": "Class AppMethodd Namespace ASEassignment Assembly ASEassignment.dll Represents a method that interacts with the BOOSE.Boolean class. Inherits from the BOOSE.Method class and provides additional functionality for resetting a count. public class AppMethodd : Method, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand CompoundCommand Method AppMethodd Implements ICommand Inherited Members Method.CheckParameters(string[]) Method.Compile() Method.LocalVariables Method.MethodName Method.Type CompoundCommand.ReduceRestrictions() CompoundCommand.CorrespondingCommand ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppMethodd() Initializes a new instance of the AppMethodd class and resets the count to 0. public AppMethodd() Methods Execute() Executes the method by calling the base class's Execute method and resetting the count to 0. public override void Execute() ResetCount(int) Resets the count in the BOOSE.Boolean class by accessing its private static field. public void ResetCount(int newVal) Parameters newVal int The new value to set for the count."
  },
  "api/ASEassignment.AppParser.html": {
    "href": "api/ASEassignment.AppParser.html",
    "title": "Class AppParser | ASE Assignment final",
    "keywords": "Class AppParser Namespace ASEassignment Assembly ASEassignment.dll Represents a parser for parsing commands and managing stored programs. Inherits from the BOOSE.Parser class to handle parsing logic. public class AppParser : Parser, IParser Inheritance object Parser AppParser Implements IParser Inherited Members Parser.ParseCommand(string) Parser.ParseProgram(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AppParser(CommandFactory, StoredProgram) Initializes a new instance of the AppParser class. public AppParser(CommandFactory factory, StoredProgram program) Parameters factory CommandFactory The command factory used to create commands for parsing. program StoredProgram The stored program that will be parsed."
  },
  "api/ASEassignment.AppPeek.html": {
    "href": "api/ASEassignment.AppPeek.html",
    "title": "Class AppPeek | ASE Assignment final",
    "keywords": "Class AppPeek Namespace ASEassignment Assembly ASEassignment.dll Represents the Peek operation inheriting from AppArray. Provides functionality to validate parameters, compile, and execute Peek commands. public class AppPeek : AppArray, ICommand Inheritance object Command Evaluation Array AppArray AppPeek Implements ICommand Inherited Members Array.PEEK Array.POKE Array.type Array.rows Array.columns Array.valueInt Array.valueReal Array.intArray Array.realArray Array.pokeValue Array.peekVar Array.rowS Array.columnS Array.row Array.column Array.ArrayRestrictions() Array.ReduceRestrictionCounter() Array.ProcessArrayParametersCompile(bool) Array.ProcessArrayParametersExecute(bool) Array.SetIntArray(int, int, int) Array.SetRealArray(double, int, int) Array.GetIntArray(int, int) Array.GetRealArray(int, int) Array.Rows Array.Columns Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppPeek() Initializes a new instance of the AppPeek class. public AppPeek() Methods CheckParameters(string[]) Validates the parameters provided for the Peek operation. Ensures the parameter count is either 2 or 3. public override void CheckParameters(string[] Parameters) Parameters Parameters string[] The list of parameters for the Peek command. Exceptions CommandException Thrown if the parameter count is invalid. Compile() Compiles the Peek command by processing the array parameters for Peek-specific operations. public override void Compile() Exceptions Exception Thrown when an error occurs during compilation. Execute() Executes the Peek command by processing the array parameters and updating the specified variable. public override void Execute() Exceptions CommandException Thrown when the data type is invalid. Exception Thrown when an error occurs during execution."
  },
  "api/ASEassignment.AppPoke.html": {
    "href": "api/ASEassignment.AppPoke.html",
    "title": "Class AppPoke | ASE Assignment final",
    "keywords": "Class AppPoke Namespace ASEassignment Assembly ASEassignment.dll Represents the Poke operation in the application, inheriting from AppArray. Provides functionality to validate parameters, compile, execute, and set Poke commands. public class AppPoke : AppArray, ICommand Inheritance object Command Evaluation Array AppArray AppPoke Implements ICommand Inherited Members Array.PEEK Array.POKE Array.type Array.rows Array.columns Array.valueInt Array.valueReal Array.intArray Array.realArray Array.pokeValue Array.peekVar Array.rowS Array.columnS Array.row Array.column Array.ArrayRestrictions() Array.ReduceRestrictionCounter() Array.ProcessArrayParametersCompile(bool) Array.ProcessArrayParametersExecute(bool) Array.SetIntArray(int, int, int) Array.SetRealArray(double, int, int) Array.GetIntArray(int, int) Array.GetRealArray(int, int) Array.Rows Array.Columns Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppPoke() Initializes a new instance of the AppPoke class. public AppPoke() Methods CheckParameters(string[]) Validates the parameters provided for the Poke operation. Ensures the parameter count is either 2 or 3. public override void CheckParameters(string[] parameter) Parameters parameter string[] The list of parameters for the Poke command. Exceptions CommandException Thrown if the parameter count is invalid. Compile() Compiles the Poke command by processing the array parameters for Poke-specific operations. public override void Compile() Exceptions Exception Thrown when an error occurs during compilation. Execute() Executes the Poke command by processing the array parameters. public override void Execute() Exceptions Exception Thrown when an error occurs during execution. Set(StoredProgram, string) Sets the parameters for the Poke command within the specified program. public override void Set(StoredProgram Program, string Params) Parameters Program StoredProgram The program in which the Poke command is being set. Params string The parameters for the Poke command. Exceptions Exception Thrown when an error occurs while setting parameters."
  },
  "api/ASEassignment.AppReal.html": {
    "href": "api/ASEassignment.AppReal.html",
    "title": "Class AppReal | ASE Assignment final",
    "keywords": "Class AppReal Namespace ASEassignment Assembly ASEassignment.dll Represents the AppReal class, a derived class from Real, that implements specific restrictions on variable usage and provides compilation and execution functionalities. public class AppReal : Real, ICommand Inheritance object Command Evaluation Real AppReal Implements ICommand Inherited Members Real.Compile() Real.Execute() Real.Value Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppReal() Initializes a new instance of the AppReal class and enforces restrictions on variable usage. public AppReal() Methods Restrictions() Enforces restrictions on the usage of variables. Removed restrictions in this case. public override void Restrictions()"
  },
  "api/ASEassignment.AppRect.html": {
    "href": "api/ASEassignment.AppRect.html",
    "title": "Class AppRect | ASE Assignment final",
    "keywords": "Class AppRect Namespace ASEassignment Assembly ASEassignment.dll Represents a rectangle drawing command with an optional filled property. Extends the BOOSE.Rect class to include additional functionality. public class AppRect : Rect, ICommand Inheritance object Command CanvasCommand CommandOneParameter Rect AppRect Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppRect() Initializes a default instance of the AppRect class. public AppRect() AppRect(Canvas, int, int, bool) Initializes a new instance of the AppRect class with specified parameters. public AppRect(Canvas c, int width, int height, bool filled = false) Parameters c Canvas The canvas on which the rectangle will be drawn. width int The width of the rectangle. height int The height of the rectangle. filled bool Indicates whether the rectangle is filled or not. Default is false. Methods CheckParameters(string[]) Validates the parameters passed to the rectangle drawing command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters provided to the command. Exceptions CommandException Thrown if number of parameters is invalid or if filled parameter is not valid. Execute() Executes the rectangle drawing command on the canvas. public override void Execute() Exceptions CommandException Thrown if execution fails due to invalid parameters."
  },
  "api/ASEassignment.AppReset.html": {
    "href": "api/ASEassignment.AppReset.html",
    "title": "Class AppReset | ASE Assignment final",
    "keywords": "Class AppReset Namespace ASEassignment Assembly ASEassignment.dll Represents the command to reset the canvas to its initial state. Inherits from BOOSE.CanvasCommand. public class AppReset : CanvasCommand, ICommand Inheritance object Command CanvasCommand AppReset Implements ICommand Inherited Members CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppReset() Initializes a new instance of the AppReset class. public AppReset() AppReset(Canvas) Initializes a new instance of the AppReset class with the specified canvas. public AppReset(Canvas c) Parameters c Canvas The canvas to reset. Methods CheckParameters(string[]) Checks the parameters for the reset command. The reset command does not require any parameters, so throws an exception if parameters are provided. public override void CheckParameters(string[] parameter) Parameters parameter string[] The array of parameters passed to the command. Exceptions CommandException Thrown if any parameters are provided, as the reset command takes no parameters. Execute() Executes the reset command, resetting the canvas to its initial state. Calls the BOOSE.Canvas.Reset() method to clear and reset the canvas. public override void Execute()"
  },
  "api/ASEassignment.AppStoredProgram.html": {
    "href": "api/ASEassignment.AppStoredProgram.html",
    "title": "Class AppStoredProgram | ASE Assignment final",
    "keywords": "Class AppStoredProgram Namespace ASEassignment Assembly ASEassignment.dll Represents a stored program implementation by extending the base BOOSE.StoredProgram class. Provides additional functionality for program execution. public class AppStoredProgram : StoredProgram, IList, ICollection, IEnumerable, ICloneable, IStoredProgram Inheritance object ArrayList StoredProgram AppStoredProgram Implements IList ICollection IEnumerable ICloneable IStoredProgram Inherited Members StoredProgram.SyntaxOk StoredProgram.AddMethod(Method) StoredProgram.GetMethod(string) StoredProgram.AddVariable(Evaluation) StoredProgram.GetVariable(string) StoredProgram.GetVariable(int) StoredProgram.FindVariable(Evaluation) StoredProgram.FindVariable(string) StoredProgram.VariableExists(string) StoredProgram.GetVarValue(string) StoredProgram.UpdateVariable(string, int) StoredProgram.UpdateVariable(string, double) StoredProgram.UpdateVariable(string, bool) StoredProgram.DeleteVariable(string) StoredProgram.IsExpression(string) StoredProgram.EvaluateExpressionWithString(string) StoredProgram.EvaluateExpression(string) StoredProgram.Push(ConditionalCommand) StoredProgram.Pop() StoredProgram.Add(Command) StoredProgram.NextCommand() StoredProgram.ResetProgram() StoredProgram.Commandsleft() StoredProgram.PC ArrayList.Adapter(IList) ArrayList.Add(object) ArrayList.AddRange(ICollection) ArrayList.BinarySearch(int, int, object, IComparer) ArrayList.BinarySearch(object) ArrayList.BinarySearch(object, IComparer) ArrayList.Clear() ArrayList.Clone() ArrayList.Contains(object) ArrayList.CopyTo(Array) ArrayList.CopyTo(Array, int) ArrayList.CopyTo(int, Array, int, int) ArrayList.FixedSize(ArrayList) ArrayList.FixedSize(IList) ArrayList.GetEnumerator() ArrayList.GetEnumerator(int, int) ArrayList.GetRange(int, int) ArrayList.IndexOf(object) ArrayList.IndexOf(object, int) ArrayList.IndexOf(object, int, int) ArrayList.Insert(int, object) ArrayList.InsertRange(int, ICollection) ArrayList.LastIndexOf(object) ArrayList.LastIndexOf(object, int) ArrayList.LastIndexOf(object, int, int) ArrayList.ReadOnly(ArrayList) ArrayList.ReadOnly(IList) ArrayList.Remove(object) ArrayList.RemoveAt(int) ArrayList.RemoveRange(int, int) ArrayList.Repeat(object, int) ArrayList.Reverse() ArrayList.Reverse(int, int) ArrayList.SetRange(int, ICollection) ArrayList.Sort() ArrayList.Sort(IComparer) ArrayList.Sort(int, int, IComparer) ArrayList.Synchronized(ArrayList) ArrayList.Synchronized(IList) ArrayList.ToArray() ArrayList.ToArray(Type) ArrayList.TrimToSize() ArrayList.Capacity ArrayList.Count ArrayList.IsFixedSize ArrayList.IsReadOnly ArrayList.IsSynchronized ArrayList.this[int] ArrayList.SyncRoot object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AppStoredProgram(ICanvas) Initializes a new instance of the AppStoredProgram class with the specified canvas. public AppStoredProgram(ICanvas canvas) Parameters canvas ICanvas The canvas used for drawing. Methods Run() Executes the stored program by iterating through the commands in sequence. public override void Run() Exceptions StoredProgramException Thrown when a command execution fails due to a BOOSE.BOOSEException."
  },
  "api/ASEassignment.AppTriangle.html": {
    "href": "api/ASEassignment.AppTriangle.html",
    "title": "Class AppTriangle | ASE Assignment final",
    "keywords": "Class AppTriangle Namespace ASEassignment Assembly ASEassignment.dll Represents the command to draw a triangle on the canvas. Inherits from BOOSE.CanvasCommand. public class AppTriangle : CommandTwoParameters, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandTwoParameters AppTriangle Implements ICommand Inherited Members CommandTwoParameters.param2 CommandTwoParameters.param2unprocessed CommandTwoParameters.CheckParameters(string[]) CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Execute() Executes the command to draw the triangle on the canvas. Ensures that the width and height are within the given range. public override void Execute() Exceptions RestrictionException Thrown if the parameters exceed the restrictions. CommandException Thrown if the parameters are invalid."
  },
  "api/ASEassignment.AppWhile.html": {
    "href": "api/ASEassignment.AppWhile.html",
    "title": "Class AppWhile | ASE Assignment final",
    "keywords": "Class AppWhile Namespace ASEassignment Assembly ASEassignment.dll Represents a \"while\" loop command. public class AppWhile : AppCompoundCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand AppConditionalCommand AppCompoundCommand AppWhile Implements ICommand Inherited Members AppCompoundCommand.CorrCommand AppCompoundCommand.CheckParameters(string[]) AppCompoundCommand.ResetCount(int) AppCompoundCommand.Execute() ConditionalCommand.endLineNumber ConditionalCommand.Compile() ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppWhile() Initializes a new instance of the AppWhile class. public AppWhile()"
  },
  "api/ASEassignment.AppWrite.html": {
    "href": "api/ASEassignment.AppWrite.html",
    "title": "Class AppWrite | ASE Assignment final",
    "keywords": "Class AppWrite Namespace ASEassignment Assembly ASEassignment.dll Represents a command to write text onto a canvas. public class AppWrite : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter AppWrite Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CommandOneParameter.CheckParameters(string[]) CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppWrite() Initializes a new instance of the AppWrite class. public AppWrite() AppWrite(Canvas, string) Initializes a new instance of the AppWrite class with the specified canvas and text. public AppWrite(Canvas c, string text) Parameters c Canvas The canvas where the text will be written. text string The text to write on the canvas. Methods Execute() Executes the write command by writing the specified text or value of a variable onto the canvas. public override void Execute() Exceptions Exception Thrown when an error occurs during the execution of the write command."
  },
  "api/ASEassignment.Form1.html": {
    "href": "api/ASEassignment.Form1.html",
    "title": "Class Form1 | ASE Assignment final",
    "keywords": "Class Form1 Namespace ASEassignment Assembly ASEassignment.dll Represents the main form of the application for drawing and executing commands on a canvas. Contains controls for parsing and running a stored program. public class Form1 : Form, IDropTarget, ISynchronizeInvoke, IWin32Window, IBindableComponent, IComponent, IDisposable, IContainerControl Inheritance object MarshalByRefObject Component Control ScrollableControl ContainerControl Form Form1 Implements IDropTarget ISynchronizeInvoke IWin32Window IBindableComponent IComponent IDisposable IContainerControl Inherited Members Form.SetVisibleCore(bool) Form.Activate() Form.ActivateMdiChild(Form) Form.AddOwnedForm(Form) Form.AdjustFormScrollbars(bool) Form.Close() Form.CreateAccessibilityInstance() Form.CreateControlsInstance() Form.CreateHandle() Form.DefWndProc(ref Message) Form.ProcessMnemonic(char) Form.CenterToParent() Form.CenterToScreen() Form.LayoutMdi(MdiLayout) Form.OnActivated(EventArgs) Form.OnBackgroundImageChanged(EventArgs) Form.OnBackgroundImageLayoutChanged(EventArgs) Form.OnClosing(CancelEventArgs) Form.OnClosed(EventArgs) Form.OnFormClosing(FormClosingEventArgs) Form.OnFormClosed(FormClosedEventArgs) Form.OnCreateControl() Form.OnDeactivate(EventArgs) Form.OnEnabledChanged(EventArgs) Form.OnEnter(EventArgs) Form.OnFontChanged(EventArgs) Form.OnGotFocus(EventArgs) Form.OnHandleCreated(EventArgs) Form.OnHandleDestroyed(EventArgs) Form.OnHelpButtonClicked(CancelEventArgs) Form.OnLayout(LayoutEventArgs) Form.OnLoad(EventArgs) Form.OnMaximizedBoundsChanged(EventArgs) Form.OnMaximumSizeChanged(EventArgs) Form.OnMinimumSizeChanged(EventArgs) Form.OnInputLanguageChanged(InputLanguageChangedEventArgs) Form.OnInputLanguageChanging(InputLanguageChangingEventArgs) Form.OnVisibleChanged(EventArgs) Form.OnMdiChildActivate(EventArgs) Form.OnMenuStart(EventArgs) Form.OnMenuComplete(EventArgs) Form.OnPaint(PaintEventArgs) Form.OnResize(EventArgs) Form.OnDpiChanged(DpiChangedEventArgs) Form.OnGetDpiScaledSize(int, int, ref Size) Form.OnRightToLeftLayoutChanged(EventArgs) Form.OnShown(EventArgs) Form.OnTextChanged(EventArgs) Form.ProcessCmdKey(ref Message, Keys) Form.ProcessDialogKey(Keys) Form.ProcessDialogChar(char) Form.ProcessKeyPreview(ref Message) Form.ProcessTabKey(bool) Form.RemoveOwnedForm(Form) Form.Select(bool, bool) Form.ScaleMinMaxSize(float, float, bool) Form.GetScaledBounds(Rectangle, SizeF, BoundsSpecified) Form.ScaleControl(SizeF, BoundsSpecified) Form.SetBoundsCore(int, int, int, int, BoundsSpecified) Form.SetClientSizeCore(int, int) Form.SetDesktopBounds(int, int, int, int) Form.SetDesktopLocation(int, int) Form.Show(IWin32Window) Form.ShowDialog() Form.ShowDialog(IWin32Window) Form.ToString() Form.UpdateDefaultButton() Form.OnResizeBegin(EventArgs) Form.OnResizeEnd(EventArgs) Form.OnStyleChanged(EventArgs) Form.ValidateChildren() Form.ValidateChildren(ValidationConstraints) Form.WndProc(ref Message) Form.AcceptButton Form.ActiveForm Form.ActiveMdiChild Form.AllowTransparency Form.AutoScroll Form.AutoSize Form.AutoSizeMode Form.AutoValidate Form.BackColor Form.FormBorderStyle Form.CancelButton Form.ClientSize Form.ControlBox Form.CreateParams Form.DefaultImeMode Form.DefaultSize Form.DesktopBounds Form.DesktopLocation Form.DialogResult Form.HelpButton Form.Icon Form.IsMdiChild Form.IsMdiContainer Form.IsRestrictedWindow Form.KeyPreview Form.Location Form.MaximizedBounds Form.MaximumSize Form.MainMenuStrip Form.MinimumSize Form.MaximizeBox Form.MdiChildren Form.MdiChildrenMinimizedAnchorBottom Form.MdiParent Form.MinimizeBox Form.Modal Form.Opacity Form.OwnedForms Form.Owner Form.RestoreBounds Form.RightToLeftLayout Form.ShowInTaskbar Form.ShowIcon Form.ShowWithoutActivation Form.Size Form.SizeGripStyle Form.StartPosition Form.Text Form.TopLevel Form.TopMost Form.TransparencyKey Form.WindowState Form.AutoSizeChanged Form.AutoValidateChanged Form.HelpButtonClicked Form.MaximizedBoundsChanged Form.MaximumSizeChanged Form.MinimumSizeChanged Form.Activated Form.Deactivate Form.FormClosing Form.FormClosed Form.Load Form.MdiChildActivate Form.MenuComplete Form.MenuStart Form.InputLanguageChanged Form.InputLanguageChanging Form.RightToLeftLayoutChanged Form.Shown Form.DpiChanged Form.ResizeBegin Form.ResizeEnd ContainerControl.OnAutoValidateChanged(EventArgs) ContainerControl.OnMove(EventArgs) ContainerControl.OnParentChanged(EventArgs) ContainerControl.PerformAutoScale() ContainerControl.RescaleConstantsForDpi(int, int) ContainerControl.Validate() ContainerControl.Validate(bool) ContainerControl.AutoScaleDimensions ContainerControl.AutoScaleFactor ContainerControl.AutoScaleMode ContainerControl.BindingContext ContainerControl.CanEnableIme ContainerControl.ActiveControl ContainerControl.CurrentAutoScaleDimensions ContainerControl.ParentForm ScrollableControl.ScrollStateAutoScrolling ScrollableControl.ScrollStateHScrollVisible ScrollableControl.ScrollStateVScrollVisible ScrollableControl.ScrollStateUserHasScrolled ScrollableControl.ScrollStateFullDrag ScrollableControl.GetScrollState(int) ScrollableControl.OnMouseWheel(MouseEventArgs) ScrollableControl.OnRightToLeftChanged(EventArgs) ScrollableControl.OnPaintBackground(PaintEventArgs) ScrollableControl.OnPaddingChanged(EventArgs) ScrollableControl.SetDisplayRectLocation(int, int) ScrollableControl.ScrollControlIntoView(Control) ScrollableControl.ScrollToControl(Control) ScrollableControl.OnScroll(ScrollEventArgs) ScrollableControl.SetAutoScrollMargin(int, int) ScrollableControl.SetScrollState(int, bool) ScrollableControl.AutoScrollMargin ScrollableControl.AutoScrollPosition ScrollableControl.AutoScrollMinSize ScrollableControl.DisplayRectangle ScrollableControl.HScroll ScrollableControl.HorizontalScroll ScrollableControl.VScroll ScrollableControl.VerticalScroll ScrollableControl.Scroll Control.GetAccessibilityObjectById(int) Control.SetAutoSizeMode(AutoSizeMode) Control.GetAutoSizeMode() Control.GetPreferredSize(Size) Control.AccessibilityNotifyClients(AccessibleEvents, int) Control.AccessibilityNotifyClients(AccessibleEvents, int, int) Control.BeginInvoke(Delegate) Control.BeginInvoke(Action) Control.BeginInvoke(Delegate, params object[]) Control.BringToFront() Control.Contains(Control) Control.CreateGraphics() Control.CreateControl() Control.DestroyHandle() Control.DoDragDrop(object, DragDropEffects) Control.DoDragDrop(object, DragDropEffects, Bitmap, Point, bool) Control.DrawToBitmap(Bitmap, Rectangle) Control.EndInvoke(IAsyncResult) Control.FindForm() Control.GetTopLevel() Control.RaiseKeyEvent(object, KeyEventArgs) Control.RaiseMouseEvent(object, MouseEventArgs) Control.Focus() Control.FromChildHandle(nint) Control.FromHandle(nint) Control.GetChildAtPoint(Point, GetChildAtPointSkip) Control.GetChildAtPoint(Point) Control.GetContainerControl() Control.GetNextControl(Control, bool) Control.GetStyle(ControlStyles) Control.Hide() Control.InitLayout() Control.Invalidate(Region) Control.Invalidate(Region, bool) Control.Invalidate() Control.Invalidate(bool) Control.Invalidate(Rectangle) Control.Invalidate(Rectangle, bool) Control.Invoke(Action) Control.Invoke(Delegate) Control.Invoke(Delegate, params object[]) Control.Invoke<T>(Func<T>) Control.InvokePaint(Control, PaintEventArgs) Control.InvokePaintBackground(Control, PaintEventArgs) Control.IsKeyLocked(Keys) Control.IsInputChar(char) Control.IsInputKey(Keys) Control.IsMnemonic(char, string) Control.LogicalToDeviceUnits(int) Control.LogicalToDeviceUnits(Size) Control.ScaleBitmapLogicalToDevice(ref Bitmap) Control.NotifyInvalidate(Rectangle) Control.InvokeOnClick(Control, EventArgs) Control.OnAutoSizeChanged(EventArgs) Control.OnBackColorChanged(EventArgs) Control.OnBindingContextChanged(EventArgs) Control.OnCausesValidationChanged(EventArgs) Control.OnContextMenuStripChanged(EventArgs) Control.OnCursorChanged(EventArgs) Control.OnDataContextChanged(EventArgs) Control.OnDockChanged(EventArgs) Control.OnForeColorChanged(EventArgs) Control.OnNotifyMessage(Message) Control.OnParentBackColorChanged(EventArgs) Control.OnParentBackgroundImageChanged(EventArgs) Control.OnParentBindingContextChanged(EventArgs) Control.OnParentCursorChanged(EventArgs) Control.OnParentDataContextChanged(EventArgs) Control.OnParentEnabledChanged(EventArgs) Control.OnParentFontChanged(EventArgs) Control.OnParentForeColorChanged(EventArgs) Control.OnParentRightToLeftChanged(EventArgs) Control.OnParentVisibleChanged(EventArgs) Control.OnPrint(PaintEventArgs) Control.OnTabIndexChanged(EventArgs) Control.OnTabStopChanged(EventArgs) Control.OnClick(EventArgs) Control.OnClientSizeChanged(EventArgs) Control.OnControlAdded(ControlEventArgs) Control.OnControlRemoved(ControlEventArgs) Control.OnLocationChanged(EventArgs) Control.OnDoubleClick(EventArgs) Control.OnDragEnter(DragEventArgs) Control.OnDragOver(DragEventArgs) Control.OnDragLeave(EventArgs) Control.OnDragDrop(DragEventArgs) Control.OnGiveFeedback(GiveFeedbackEventArgs) Control.InvokeGotFocus(Control, EventArgs) Control.OnHelpRequested(HelpEventArgs) Control.OnInvalidated(InvalidateEventArgs) Control.OnKeyDown(KeyEventArgs) Control.OnKeyPress(KeyPressEventArgs) Control.OnKeyUp(KeyEventArgs) Control.OnLeave(EventArgs) Control.InvokeLostFocus(Control, EventArgs) Control.OnLostFocus(EventArgs) Control.OnMarginChanged(EventArgs) Control.OnMouseDoubleClick(MouseEventArgs) Control.OnMouseClick(MouseEventArgs) Control.OnMouseCaptureChanged(EventArgs) Control.OnMouseDown(MouseEventArgs) Control.OnMouseEnter(EventArgs) Control.OnMouseLeave(EventArgs) Control.OnDpiChangedBeforeParent(EventArgs) Control.OnDpiChangedAfterParent(EventArgs) Control.OnMouseHover(EventArgs) Control.OnMouseMove(MouseEventArgs) Control.OnMouseUp(MouseEventArgs) Control.OnQueryContinueDrag(QueryContinueDragEventArgs) Control.OnRegionChanged(EventArgs) Control.OnPreviewKeyDown(PreviewKeyDownEventArgs) Control.OnSizeChanged(EventArgs) Control.OnChangeUICues(UICuesEventArgs) Control.OnSystemColorsChanged(EventArgs) Control.OnValidating(CancelEventArgs) Control.OnValidated(EventArgs) Control.PerformLayout() Control.PerformLayout(Control, string) Control.PointToClient(Point) Control.PointToScreen(Point) Control.PreProcessMessage(ref Message) Control.PreProcessControlMessage(ref Message) Control.ProcessKeyEventArgs(ref Message) Control.ProcessKeyMessage(ref Message) Control.RaiseDragEvent(object, DragEventArgs) Control.RaisePaintEvent(object, PaintEventArgs) Control.RecreateHandle() Control.RectangleToClient(Rectangle) Control.RectangleToScreen(Rectangle) Control.ReflectMessage(nint, ref Message) Control.Refresh() Control.ResetMouseEventArgs() Control.ResetText() Control.ResumeLayout() Control.ResumeLayout(bool) Control.Scale(SizeF) Control.Select() Control.SelectNextControl(Control, bool, bool, bool, bool) Control.SendToBack() Control.SetBounds(int, int, int, int) Control.SetBounds(int, int, int, int, BoundsSpecified) Control.SizeFromClientSize(Size) Control.SetStyle(ControlStyles, bool) Control.SetTopLevel(bool) Control.RtlTranslateAlignment(HorizontalAlignment) Control.RtlTranslateAlignment(LeftRightAlignment) Control.RtlTranslateAlignment(ContentAlignment) Control.RtlTranslateHorizontal(HorizontalAlignment) Control.RtlTranslateLeftRight(LeftRightAlignment) Control.RtlTranslateContent(ContentAlignment) Control.Show() Control.SuspendLayout() Control.Update() Control.UpdateBounds() Control.UpdateBounds(int, int, int, int) Control.UpdateBounds(int, int, int, int, int, int) Control.UpdateZOrder() Control.UpdateStyles() Control.OnImeModeChanged(EventArgs) Control.AccessibilityObject Control.AccessibleDefaultActionDescription Control.AccessibleDescription Control.AccessibleName Control.AccessibleRole Control.AllowDrop Control.Anchor Control.AutoScrollOffset Control.LayoutEngine Control.DataContext Control.BackgroundImage Control.BackgroundImageLayout Control.Bottom Control.Bounds Control.CanFocus Control.CanRaiseEvents Control.CanSelect Control.Capture Control.CausesValidation Control.CheckForIllegalCrossThreadCalls Control.ClientRectangle Control.CompanyName Control.ContainsFocus Control.ContextMenuStrip Control.Controls Control.Created Control.Cursor Control.DataBindings Control.DefaultBackColor Control.DefaultCursor Control.DefaultFont Control.DefaultForeColor Control.DefaultMargin Control.DefaultMaximumSize Control.DefaultMinimumSize Control.DefaultPadding Control.DeviceDpi Control.IsDisposed Control.Disposing Control.Dock Control.DoubleBuffered Control.Enabled Control.Focused Control.Font Control.FontHeight Control.ForeColor Control.Handle Control.HasChildren Control.Height Control.IsHandleCreated Control.InvokeRequired Control.IsAccessible Control.IsAncestorSiteInDesignMode Control.IsMirrored Control.Left Control.Margin Control.ModifierKeys Control.MouseButtons Control.MousePosition Control.Name Control.Parent Control.ProductName Control.ProductVersion Control.RecreatingHandle Control.Region Control.RenderRightToLeft Control.ResizeRedraw Control.Right Control.RightToLeft Control.ScaleChildren Control.Site Control.TabIndex Control.TabStop Control.Tag Control.Top Control.TopLevelControl Control.ShowKeyboardCues Control.ShowFocusCues Control.UseWaitCursor Control.Visible Control.Width Control.PreferredSize Control.Padding Control.ImeMode Control.ImeModeBase Control.PropagatingImeMode Control.BackColorChanged Control.BackgroundImageChanged Control.BackgroundImageLayoutChanged Control.BindingContextChanged Control.CausesValidationChanged Control.ClientSizeChanged Control.ContextMenuStripChanged Control.CursorChanged Control.DockChanged Control.EnabledChanged Control.FontChanged Control.ForeColorChanged Control.LocationChanged Control.MarginChanged Control.RegionChanged Control.RightToLeftChanged Control.SizeChanged Control.TabIndexChanged Control.TabStopChanged Control.TextChanged Control.VisibleChanged Control.Click Control.ControlAdded Control.ControlRemoved Control.DataContextChanged Control.DragDrop Control.DragEnter Control.DragOver Control.DragLeave Control.GiveFeedback Control.HandleCreated Control.HandleDestroyed Control.HelpRequested Control.Invalidated Control.PaddingChanged Control.Paint Control.QueryContinueDrag Control.QueryAccessibilityHelp Control.DoubleClick Control.Enter Control.GotFocus Control.KeyDown Control.KeyPress Control.KeyUp Control.Layout Control.Leave Control.LostFocus Control.MouseClick Control.MouseDoubleClick Control.MouseCaptureChanged Control.MouseDown Control.MouseEnter Control.MouseLeave Control.DpiChangedBeforeParent Control.DpiChangedAfterParent Control.MouseHover Control.MouseMove Control.MouseUp Control.MouseWheel Control.Move Control.PreviewKeyDown Control.Resize Control.ChangeUICues Control.StyleChanged Control.SystemColorsChanged Control.Validating Control.Validated Control.ParentChanged Control.ImeModeChanged Component.Dispose() Component.GetService(Type) Component.Container Component.DesignMode Component.Events Component.Disposed MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Form1() Initializes a new instance of the Form1 class. Sets up the canvas, command factory, program, and parser. Displays the error in the debug window. Thrown if any exception is thrown while initializing. public Form1() Methods Dispose(bool) Clean up any resources being used. protected override void Dispose(bool disposing) Parameters disposing bool true if managed resources should be disposed; otherwise, false. loadBtn_Click(object, EventArgs) public void loadBtn_Click(object sender, EventArgs e) Parameters sender object e EventArgs saveBtn_Click(object, EventArgs) Handles the click event of Save Button. Saves the canvas image as a PNG image in any chosen location. public void saveBtn_Click(object sender, EventArgs e) Parameters sender object The source of the event e EventArgs The event data for the button click event."
  },
  "api/ASEassignment.html": {
    "href": "api/ASEassignment.html",
    "title": "Namespace ASEassignment | ASE Assignment final",
    "keywords": "Namespace ASEassignment Classes AppArray Represents an implementation of an array class with restrictions on usage and additional parameter checks. Extends the BOOSE.Array class. AppBoolean Represents an implementation of the BOOSE.Boolean class with overridden behavior. AppCanvas Represents the application canvas for drawing shapes, text, and graphics. Implements the BOOSE.ICanvas interface. Implements the Singleton design pattern to ensure only one instance exists. AppCircle Represents a drawing command for circle with optional filled property. Extends the BOOSE.Circle class to include additional functionality. AppClear Represents the command to clear the canvas, removing all drawings. Inherits from BOOSE.CanvasCommand. AppCommandFactory A factory class responsible for creating commands based on the command type. Inherits from BOOSE.CommandFactory. AppCompoundCommand Represents a compound command, extending the functionality of the BOOSE.ConditionalCommand class. Used to define and manage compound structures like loops or conditional blocks. AppConditionalCommand Extending the functionality of the BOOSE.ConditionalCommand class. AppElse Represents the implementation of an \"Else\" conditional command in the program. AppEnd Represents the implementation of the \"End\" command which marks the end of compound commands such as If, While, and For. AppFor Represents the implementation of the \"For\" command, extending the functionality of the base BOOSE.For class. AppIf Represents implementation of compound command to handle \"If\" statements. AppInt Represents the AppInt class, which extends the functionality of the BOOSE.Int class. Enforces restrictions on the usage of integer variables and provides methods for compilation and execution. AppMethodd Represents a method that interacts with the BOOSE.Boolean class. Inherits from the BOOSE.Method class and provides additional functionality for resetting a count. AppParser Represents a parser for parsing commands and managing stored programs. Inherits from the BOOSE.Parser class to handle parsing logic. AppPeek Represents the Peek operation inheriting from AppArray. Provides functionality to validate parameters, compile, and execute Peek commands. AppPoke Represents the Poke operation in the application, inheriting from AppArray. Provides functionality to validate parameters, compile, execute, and set Poke commands. AppReal Represents the AppReal class, a derived class from Real, that implements specific restrictions on variable usage and provides compilation and execution functionalities. AppRect Represents a rectangle drawing command with an optional filled property. Extends the BOOSE.Rect class to include additional functionality. AppReset Represents the command to reset the canvas to its initial state. Inherits from BOOSE.CanvasCommand. AppStoredProgram Represents a stored program implementation by extending the base BOOSE.StoredProgram class. Provides additional functionality for program execution. AppTriangle Represents the command to draw a triangle on the canvas. Inherits from BOOSE.CanvasCommand. AppWhile Represents a \"while\" loop command. AppWrite Represents a command to write text onto a canvas. Form1 Represents the main form of the application for drawing and executing commands on a canvas. Contains controls for parsing and running a stored program."
  },
  "api/AppTest.AppArrayTests.html": {
    "href": "api/AppTest.AppArrayTests.html",
    "title": "Class AppArrayTests | ASE Assignment final",
    "keywords": "Class AppArrayTests Namespace AppTest Assembly AppTest.dll Unit Tests for the AppArray class, verifying its behavior and functionality. [TestFixture] public class AppArrayTests Inheritance object AppArrayTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Constructor_ShouldInitializeInstance() Tests that the AppArray constructor successfully initializes an instance. [Test] public void Constructor_ShouldInitializeInstance() Setup() Sets up the test environment by initializing a new instance of AppArray. [SetUp] public void Setup()"
  },
  "api/AppTest.AppBooleanTests.html": {
    "href": "api/AppTest.AppBooleanTests.html",
    "title": "Class AppBooleanTests | ASE Assignment final",
    "keywords": "Class AppBooleanTests Namespace AppTest Assembly AppTest.dll Unit tests for the AppBoolean class. public class AppBooleanTests Inheritance object AppBooleanTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Constructor_ShouldInitializeAppBooleanInstance() Tests that the constructor of AppBoolean creates a valid instance. [Test] public void Constructor_ShouldInitializeAppBooleanInstance() Restrictions_ShouldNotThrowException() Verifies that the Restrictions() method does not throw any exceptions. [Test] public void Restrictions_ShouldNotThrowException()"
  },
  "api/AppTest.AppCanvasTests.html": {
    "href": "api/AppTest.AppCanvasTests.html",
    "title": "Class AppCanvasTests | ASE Assignment final",
    "keywords": "Class AppCanvasTests Namespace AppTest Assembly AppTest.dll [TestFixture] public class AppCanvasTests Inheritance object AppCanvasTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods SetUp() [SetUp] public void SetUp() Test_ClearCanvas() [Test] public void Test_ClearCanvas() Test_DrawCircle() [Test] public void Test_DrawCircle() Test_DrawLine() [Test] public void Test_DrawLine() Test_DrawRectangle() [Test] public void Test_DrawRectangle() Test_DrawTriangle() [Test] public void Test_DrawTriangle() Test_Instance_Singleton() [Test] public void Test_Instance_Singleton() Test_MovePenToPosition() [Test] public void Test_MovePenToPosition() Test_ResetCanvas() [Test] public void Test_ResetCanvas() Test_SetBitmap() [Test] public void Test_SetBitmap() Test_SetCanvasSize() [Test] public void Test_SetCanvasSize() Test_SetPenColor() [Test] public void Test_SetPenColor() Test_WriteText() [Test] public void Test_WriteText()"
  },
  "api/AppTest.AppCircleTests.html": {
    "href": "api/AppTest.AppCircleTests.html",
    "title": "Class AppCircleTests | ASE Assignment final",
    "keywords": "Class AppCircleTests Namespace AppTest Assembly AppTest.dll [TestFixture] public class AppCircleTests Inheritance object AppCircleTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_InvalidNumberOfParameters_ThrowsCommandException() [Test] public void CheckParameters_InvalidNumberOfParameters_ThrowsCommandException() CheckParameters_InvalidParameters_ThrowsCommandException() [Test] public void CheckParameters_InvalidParameters_ThrowsCommandException() CheckParameters_ValidParameters_DoesNotThrow() [Test] public void CheckParameters_ValidParameters_DoesNotThrow() Setup() [SetUp] public void Setup()"
  },
  "api/AppTest.AppClearTests.html": {
    "href": "api/AppTest.AppClearTests.html",
    "title": "Class AppClearTests | ASE Assignment final",
    "keywords": "Class AppClearTests Namespace AppTest Assembly AppTest.dll [TestFixture] public class AppClearTests Inheritance object AppClearTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_InvalidParameters_ThrowsCommandException() [Test] public void CheckParameters_InvalidParameters_ThrowsCommandException() Setup() [SetUp] public void Setup()"
  },
  "api/AppTest.AppCompoundCommandTests.html": {
    "href": "api/AppTest.AppCompoundCommandTests.html",
    "title": "Class AppCompoundCommandTests | ASE Assignment final",
    "keywords": "Class AppCompoundCommandTests Namespace AppTest Assembly AppTest.dll Unit tests for the AppCompoundCommand class. [TestFixture] public class AppCompoundCommandTests Inheritance object AppCompoundCommandTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_InvalidContent_ShouldThrowCommandException() Ensures that invalid content in parameters passed to CheckParameters(string[]) throws a BOOSE.CommandException. [Test] public void CheckParameters_InvalidContent_ShouldThrowCommandException() CheckParameters_InvalidParameterCount_ShouldThrowCommandException() Ensures that an invalid number of parameters passed to CheckParameters(string[]) throws a BOOSE.CommandException. [Test] public void CheckParameters_InvalidParameterCount_ShouldThrowCommandException() CheckParameters_ValidParameter_ShouldNotThrowException() Verifies that valid parameters do not throw exceptions when passed to CheckParameters(string[]). [Test] public void CheckParameters_ValidParameter_ShouldNotThrowException() Constructor_ShouldCreateInstance() Tests that the constructor of AppCompoundCommand creates a valid instance. [Test] public void Constructor_ShouldCreateInstance() CorrCommand_GetAndSet_ShouldStoreCorrectValue() Tests the get and set behavior of the CorrCommand property. [Test] public void CorrCommand_GetAndSet_ShouldStoreCorrectValue()"
  },
  "api/AppTest.AppElseTests.html": {
    "href": "api/AppTest.AppElseTests.html",
    "title": "Class AppElseTests | ASE Assignment final",
    "keywords": "Class AppElseTests Namespace AppTest Assembly AppTest.dll Unit tests for the AppElse class. public class AppElseTests Inheritance object AppElseTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_InvalidParameters_ThrowsCommandException() Tests that the CheckParameters(string[]) method throws a BOOSE.CommandException for invalid parameters. [Test] public void CheckParameters_InvalidParameters_ThrowsCommandException() CheckParameters_ValidParameters_DoesNotThrowException() Tests that the CheckParameters(string[]) method does not throw an exception when valid parameters are provided. [Test] public void CheckParameters_ValidParameters_DoesNotThrowException() SetUp() Sets up the test environment before each test is run. [SetUp] public void SetUp() TearDown() Cleans up resources after each test is run. [TearDown] public void TearDown()"
  },
  "api/AppTest.AppForTests.html": {
    "href": "api/AppTest.AppForTests.html",
    "title": "Class AppForTests | ASE Assignment final",
    "keywords": "Class AppForTests Namespace AppTest Assembly AppTest.dll Unit tests for the AppFor class. public class AppForTests Inheritance object AppForTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AppFor_Constructor_CreatesInstance() Tests that the AppFor constructor creates an instance successfully. [Test] public void AppFor_Constructor_CreatesInstance() SetUp() Sets up the test environment before each test is run. [SetUp] public void SetUp() TearDown() Cleans up resources after each test is run. [TearDown] public void TearDown()"
  },
  "api/AppTest.AppIfTests.html": {
    "href": "api/AppTest.AppIfTests.html",
    "title": "Class AppIfTests | ASE Assignment final",
    "keywords": "Class AppIfTests Namespace AppTest Assembly AppTest.dll Unit tests for the AppIf class. public class AppIfTests Inheritance object AppIfTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AppIf_Constructor_CreatesInstance() Tests that the AppIf constructor creates an instance successfully. [Test] public void AppIf_Constructor_CreatesInstance() SetUp() Sets up the test environment before each test is run. [SetUp] public void SetUp() TearDown() Cleans up resources after each test is run. [TearDown] public void TearDown()"
  },
  "api/AppTest.AppIntTests.html": {
    "href": "api/AppTest.AppIntTests.html",
    "title": "Class AppIntTests | ASE Assignment final",
    "keywords": "Class AppIntTests Namespace AppTest Assembly AppTest.dll Unit Tests for the AppInt class, verifying its behavior and functionality. [TestFixture] public class AppIntTests Inheritance object AppIntTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AppInt_Instance_Created_Successfully() Verifies that an instance of AppInt is created successfully. [Test] public void AppInt_Instance_Created_Successfully() Restrictions_DoesNotThrowException() Verifies that the Restrictions method does not throw an exception when called. [Test] public void Restrictions_DoesNotThrowException() SetUp() Sets up the test environment by initializing a new instance of AppInt. [SetUp] public void SetUp()"
  },
  "api/AppTest.AppMethodTests.html": {
    "href": "api/AppTest.AppMethodTests.html",
    "title": "Class AppMethodTests | ASE Assignment final",
    "keywords": "Class AppMethodTests Namespace AppTest Assembly AppTest.dll Unit tests for the AppMethodd class. public class AppMethodTests Inheritance object AppMethodTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AppMethod_Constructor_CreatesInstance() Tests that the AppMethodd constructor creates an instance successfully. [Test] public void AppMethod_Constructor_CreatesInstance() SetUp() Sets up the test environment before each test is run. [SetUp] public void SetUp() TearDown() Cleans up resources after each test is run. [TearDown] public void TearDown()"
  },
  "api/AppTest.AppRealTests.html": {
    "href": "api/AppTest.AppRealTests.html",
    "title": "Class AppRealTests | ASE Assignment final",
    "keywords": "Class AppRealTests Namespace AppTest Assembly AppTest.dll Unit Tests for the AppReal class, verifying its behavior and functionality. [TestFixture] public class AppRealTests Inheritance object AppRealTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Constructor_ShouldInitializeInstance() Tests that the constructor of AppReal correctly initializes an instance. [Test] public void Constructor_ShouldInitializeInstance() Restrictions_ShouldNotThrowException() Tests that the Restrictions method does not throw any exceptions when called. [Test] public void Restrictions_ShouldNotThrowException() Setup() Sets up the test environment by initializing a new instance of AppReal. [SetUp] public void Setup()"
  },
  "api/AppTest.AppStoredProgramTests.html": {
    "href": "api/AppTest.AppStoredProgramTests.html",
    "title": "Class AppStoredProgramTests | ASE Assignment final",
    "keywords": "Class AppStoredProgramTests Namespace AppTest Assembly AppTest.dll Unit tests for the AppStoredProgram class. [TestFixture] public class AppStoredProgramTests Inheritance object AppStoredProgramTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Constructor_InitializesSuccessfully() Verifies that the constructor initializes an instance of AppStoredProgram successfully. [Test] public void Constructor_InitializesSuccessfully() Run_WithInvalidCommand_ThrowsStoredProgramException() Verifies that running the program with invalid commands throws a BOOSE.StoredProgramException. [Test] public void Run_WithInvalidCommand_ThrowsStoredProgramException() Run_WithNoCommands_DoesNotThrow() Ensures that running the program with no commands does not throw any exceptions. [Test] public void Run_WithNoCommands_DoesNotThrow() Run_WithValidCommand_ExecutesSuccessfully() Tests that running the program with valid commands executes successfully. [Test] public void Run_WithValidCommand_ExecutesSuccessfully() SetUp() Sets up the test environment by initializing the AppStoredProgram instance. [SetUp] public void SetUp() TearDown() Cleans up the test environment by setting the AppStoredProgram instance as null after each test. [TearDown] public void TearDown()"
  },
  "api/AppTest.AppWhileTests.html": {
    "href": "api/AppTest.AppWhileTests.html",
    "title": "Class AppWhileTests | ASE Assignment final",
    "keywords": "Class AppWhileTests Namespace AppTest Assembly AppTest.dll Unit tests for the AppWhile class. public class AppWhileTests Inheritance object AppWhileTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AppWhile_Constructor_CreatesInstance() Tests that the AppWhile constructor creates an instance successfully. [Test] public void AppWhile_Constructor_CreatesInstance() SetUp() Sets up the test environment before each test is run. [SetUp] public void SetUp() TearDown() Cleans up resources after each test is run. [TearDown] public void TearDown()"
  },
  "api/AppTest.AppWriteTests.html": {
    "href": "api/AppTest.AppWriteTests.html",
    "title": "Class AppWriteTests | ASE Assignment final",
    "keywords": "Class AppWriteTests Namespace AppTest Assembly AppTest.dll [TestFixture] public class AppWriteTests Inheritance object AppWriteTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldNotThrow_WhenValidParameterIsGiven() [Test] public void CheckParameters_ShouldNotThrow_WhenValidParameterIsGiven() CheckParameters_ShouldThrow_WhenInvalidParameterIsGiven() [Test] public void CheckParameters_ShouldThrow_WhenInvalidParameterIsGiven() Constructor_ShouldInitialize_WithNullText() [Test] public void Constructor_ShouldInitialize_WithNullText() Constructor_ShouldInitialize_WithValidCanvasAndText() [Test] public void Constructor_ShouldInitialize_WithValidCanvasAndText()"
  },
  "api/AppTest.Tests.html": {
    "href": "api/AppTest.Tests.html",
    "title": "Class Tests | ASE Assignment final",
    "keywords": "Class Tests Namespace AppTest Assembly AppTest.dll Contains unit tests for the methods(MoveTo,DrawTo and multiline program) of the AppCanvas class. public class Tests Inheritance object Tests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods DrawTo_ValidPosition_UpdatesXAndY() Tests the DrawTo method to ensure it correctly updates the X and Y positions of the canvas after drawing a line. [Test] public void DrawTo_ValidPosition_UpdatesXAndY() MoveTo_ValidPosition_UpdatesXAndY() Tests the MoveTo method to ensure it correctly updates the X and Y positions of the canvas. [Test] public void MoveTo_ValidPosition_UpdatesXAndY() MultiLineProgram_UpdatesXAndY() Tests a series of MoveTo and DrawTo calls to ensure the canvas correctly updates its X and Y positions for a multi-line program. [Test] public void MultiLineProgram_UpdatesXAndY() Setup() Sets up the test environment by initializing the AppCanvas instance. [SetUp] public void Setup()"
  },
  "api/AppTest.html": {
    "href": "api/AppTest.html",
    "title": "Namespace AppTest | ASE Assignment final",
    "keywords": "Namespace AppTest Classes AppArrayTests Unit Tests for the AppArray class, verifying its behavior and functionality. AppBooleanTests Unit tests for the AppBoolean class. AppCanvasTests AppCircleTests AppClearTests AppCompoundCommandTests Unit tests for the AppCompoundCommand class. AppElseTests Unit tests for the AppElse class. AppForTests Unit tests for the AppFor class. AppIfTests Unit tests for the AppIf class. AppIntTests Unit Tests for the AppInt class, verifying its behavior and functionality. AppMethodTests Unit tests for the AppMethodd class. AppRealTests Unit Tests for the AppReal class, verifying its behavior and functionality. AppStoredProgramTests Unit tests for the AppStoredProgram class. AppWhileTests Unit tests for the AppWhile class. AppWriteTests Tests Contains unit tests for the methods(MoveTo,DrawTo and multiline program) of the AppCanvas class."
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | ASE Assignment final",
    "keywords": "Getting Started"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | ASE Assignment final",
    "keywords": "Introduction"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | ASE Assignment final",
    "keywords": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  }
}